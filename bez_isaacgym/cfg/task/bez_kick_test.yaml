# used to create the object
name: bez_kick
physics_engine: 'physx'

# if given will override the device setting in gym.
env:
  numEnvs: 1 #${resolve_default:4096,${...num_envs}} # 10 4096
  envSpacing: 2 # [m]
  episodeLength: 1000
  clipActions: 3.9

  plane:
    staticFriction: 1  # [-]
    dynamicFriction: 1 # [-]
    restitution: 0.0  # [-]

  bezInitState:
    pos: [ 0.0, 0.0, 0.34 ] # xyz [m] 0.355 for default or 0.33 for ready
    rot: [0.0, 0.0, 0.0, 1.0] # xyzw [quat]
    # 0.0, 0.0, 0.0, 1.0 for standing up
    # 0, -0.707, 0, -0.707 for flat looking down
    # 0, 0.707, 0, -0.707 for flat looking up
    # 0.0, 0.3827, 0.0, 0.9239 for 45 deg
    vLinear: [ 0.0, 0.0, 0.0 ]  # xyz [m/s]
    vAngular: [ 0.0, 0.0, 0.0 ]  # xyz [rad/s]

  ballInitState:
    pos: [ 0.175, 0.0, 0.1 ] # xyz [m]
    rot: [ 0.0, 0.0, 0.0, 1.0 ] # xyzw [quat]
    vLinear: [ 0.0, 0.0, 0.0 ]  # xyz [m/s]
    vAngular: [ 0.0, 0.0, 0.0 ]  # xyz [rad/s]

  goalState:
    goal: [ 1.5, 0.0]

  control:
    # PD Drive parameters:
    stiffness: 100 # [N*m/rad] maybe 1000/200 or 85/2 or 100/7.5
    damping: 7.5   # [N*m*s/rad]
    actionScale: 0.5 # ?
    controlFrequencyInv: 1 # 60 Hz

  defaultJointAngles: # = target angles when action = 0.0 defaultJointAngles
    right_leg_motor_0: 0.0 # [rad]
    right_leg_motor_1 : 0.0 # [rad]
    right_leg_motor_2: 0 # [rad]
    right_leg_motor_3: 0.0 # [rad]
    right_leg_motor_4: 0 # [rad]
    right_leg_motor_5: 0.0 # [rad]
    left_leg_motor_0: 0.0 # [rad]
    left_leg_motor_1: 0.0 # [rad]
    left_leg_motor_2: 0 # [rad]
    left_leg_motor_3: 0 # [rad]
    left_leg_motor_4: 0 # [rad]
    left_leg_motor_5: 0.0 # [rad]
    right_arm_motor_0: 0.0 # [rad]
    right_arm_motor_1: 0.0 # [rad]
    left_arm_motor_0: 0.0 # [rad]
    left_arm_motor_1: 0.0 # [rad]
    head_motor_0: 0.0 # [rad]
    head_motor_1: 0.0 # [rad]

  readyJointAngles: # = target angles when action = 0.0
    right_leg_motor_0: 0.0 # [rad]
    right_leg_motor_1: 0.0 # [rad]
    right_leg_motor_2: 0.564 # [rad]
    right_leg_motor_3: -1.176 # [rad]
    right_leg_motor_4: 0.613 # [rad]
    right_leg_motor_5: 0.0 # [rad]
    left_leg_motor_0: 0.0 # [rad]
    left_leg_motor_1: 0.0 # [rad]
    left_leg_motor_2: 0.564 # [rad]
    left_leg_motor_3: -1.176 # [rad]
    left_leg_motor_4: 0.613 # [rad]
    left_leg_motor_5: 0.0 # [rad]
    right_arm_motor_0: 0.0 # [rad]
    right_arm_motor_1: 1.5 # [rad]
    left_arm_motor_0: 0.0 # [rad]
    left_arm_motor_1: 1.5 # [rad]
    head_motor_0: 0.0 # [rad]
    head_motor_1: 0.0 # [rad]

  urdfAsset:
    collapseFixedJoints: False
    fixBaseLink: False
    replace_cylinder_with_capsule: True
    flip_visual_attachments: False
    density: 0.001
    angular_damping: 0.0
    linear_damping: 0.0
    thickness: 0.01
    disable_gravity: False
    armature: 0.001 # 0.001 interesting
    defaultDofDriveMode: 1 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)


  learn:
    # rewards
    linearVelocityXYRewardScale: 1.0
    angularVelocityZRewardScale: 0.5
    torqueRewardScale: -0.000025

    # normalization
    linearVelocityScale: 2.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.05

    # episode length in seconds
    episodeLength_s: 15

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [ 1, 1, 1 ]  # [m]
    lookat: [ 0, 0, 0 ]  # [m]

  asset:
    assetRoot: ../resources/assets
    assetFileNameBall: objects/ball.urdf
    assetFileNameBezStlSensor: bez/model/soccerbot_stl_sensor.urdf
    assetFileNameBezStl: bez/model/soccerbot_stl.urdf
    assetFileNameBezBox: bez/model/soccerbot_box.urdf
    assetFileNameBezBoxSensor: bez/model/soccerbot_box_sensor.urdf
    cleats: False
    stl: True

  debug:
    rewards: False

sim:
  dt: 0.01667 # 1/60 s
  substeps: 2
  up_axis: "z" # 0 is y, 1 is z
  use_gpu_pipeline: True
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: 4
    solver_type: 1
    use_gpu: True # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: 4
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)



task:
  randomize: False
  randomization_params:
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [ 0, .002 ] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [ 0., .02 ]
      operation: "additive"
      distribution: "gaussian"
    sim_params:
      gravity:
        range: [ 0, 0.4 ]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      bez:
        color: True
        rigid_body_properties:
          mass:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [ 0.7, 1.3 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [ 0., 0.7 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [ 0, 0.01 ]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [ 0, 0.01 ]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000